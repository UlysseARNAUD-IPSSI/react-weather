{"version":3,"sources":["components/Result/index.js","components/SearchBar/index.js","components/App/index.js","scripts/reportWebVitals.js","index.js"],"names":["Result","city","className","name","sys","dt","weather","wind","main","country","humidity","temp","date","Date","dateAsString","getDay","getMonth","getFullYear","skyDescription","description","speed","deg","SearchBar","handleKeyPress","event","handleInput","handleSuggestionClick","suggestions","searchQuery","undefined","type","id","placeholder","onInput","onKeyPress","Object","keys","length","map","split","onClick","data-name","data-country","data-id","App","props","state","activeSection","keymap","bind","updateSuggestions","updateResult","updateSearchQuery","toggleCityInput","initializeCitiesIfNotExists","showSection","this","document","addEventListener","switchToMainSectionWhenEsc","removeEventListener","activeCity","localStorage","getItem","JSON","parse","preventDefault","console","log","resetInputCityId","action","key","hasOwnProperty","cityId","getInputCityId","getInputCity","getCityFromId","getCityFromName","setItem","stringify","forceUpdate","target","value","setState","trim","jQueryVersion","endpointFind","fetch","then","response","text","replace","substring","cod","count","list","cursor","message","pushCity","catch","dataset","setInputCity","setInputCityId","querySelector","cities","getCities","_name","_country","cursorMax","toLowerCase","parseInt","cityExists","push","React","Component","sections","getSection","section","method","classList","keyCode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.cc9c1940.chunk.js","sourcesContent":["import './index.css';\n\nfunction Result({city}) {\n    if (!city) return (\n        <section className=\"App-section-result\">\n            Nothing to show :(\n        </section>\n    )\n\n    let {name, sys, dt, weather, wind, main} = city\n    const {country} = sys\n    const {humidity, temp} = main\n\n    const date = new Date(dt * 1000)\n\n    const dateAsString = `${date.getDay()}/${date.getMonth()}/${date.getFullYear()}`\n\n    const firstWeather = weather[0]\n    let skyDescription = null\n    if (!!firstWeather) {\n        skyDescription = weather.description\n    }\n\n    return (\n        <section className=\"App-section-result\">\n\n            <article>\n                <header className=\"App-section-result-header\">{name}, {country}</header>\n                <section>\n                    <article className=\"App-section-result-temperature\">\n                        {temp}°F\n                    </article>\n                    <article className=\"App-section-result-stats\">\n                        <p className=\"App-section-result-stats-sky\">\n                            {dateAsString}<br/>{skyDescription}\n                        </p>\n                        <p className=\"App-section-result-stats-wind\">\n                            Vent: {wind.speed} mph (Angle {wind.deg}°)\n                        </p>\n                        <p className=\"App-section-result-stats-humidity\">\n                            Humidité: {humidity}%\n                        </p>\n                    </article>\n                    <article className=\"App-section-result-next_days\"></article>\n                </section>\n            </article>\n\n        </section>\n    )\n}\n\nexport default Result\n","import './index.css';\n\nfunction SearchBar(\n    {\n        handleKeyPress = (event) => {\n        },\n        handleInput = (event) => {\n        },\n        handleSuggestionClick = (event) => {\n        },\n        suggestions = {},\n        searchQuery = undefined\n    }) {\n    return (\n        <section className=\"App-section-search_bar active\">\n            <div className=\"container\">\n                <input\n                    type=\"text\" name=\"city\" id=\"city\" placeholder=\"Enter a city\"\n                    onInput={handleInput} onKeyPress={handleKeyPress}/>\n                <input type=\"hidden\" name=\"city_id\" id=\"city_id\"/>\n                <aside className=\"App-section-search_bar-suggestions\">\n                    {0 !== Object.keys(suggestions).length ? (\n                            <>\n                                <h2>Did you mean ?</h2>\n                                <div className=\"App-section-search_bar-suggestions-list\">\n                                    {\n                                        Object.keys(suggestions).map(id => {\n                                            let city = suggestions[id]\n                                            const [name, country] = city.split(',')\n                                            return (\n                                                <article\n                                                    key={id}\n                                                    className=\"Suggestion\"\n                                                    onClick={handleSuggestionClick}\n                                                    data-name={name} data-country={country} data-id={id}>\n                                                    {name}<br/>{country}\n                                                </article>\n                                            )\n                                        })\n                                    }\n                                </div>\n                            </>\n                        )\n                        : (\n                            !!searchQuery ? (\n                                <h2>No cities found for \"{searchQuery}\"</h2>\n                            ) : null\n                        )\n                    }\n                </aside>\n            </div>\n        </section>\n    )\n}\n\nexport default SearchBar\n","import './index.css';\nimport Result from \"../Result\";\nimport SearchBar from \"../SearchBar\";\nimport React from \"react\";\n\nclass App extends React.Component {\n\n    state = {\n        activeSection: \"search-bar\",\n        searchQuery: undefined,\n        suggestions: {}\n    }\n\n    keymap = {}\n\n    static sections = {\n        \"search-bar\": \".App-section-search_bar\",\n        \"result\": \".App-section-result\",\n    }\n\n    static getSection = name => document.querySelector(App.sections[name])\n\n    static showSection = name => {\n        for (let section in App.sections) {\n            let method = 'remove'\n            if (name === section) method = 'add'\n\n            const element = App.getSection(section)\n\n            element.classList[method]('active')\n        }\n    }\n\n    static switchToMainSectionWhenEsc = (event) => {\n        const {keyCode} = event\n        if (27 === keyCode) App.showSection('search-bar')\n    }\n\n    constructor(props) {\n        super(props)\n\n        this.handleInput = this.handleInput.bind(this)\n        this.handleKeyPress = this.handleKeyPress.bind(this)\n        this.handleSuggestionClick = this.handleSuggestionClick.bind(this)\n\n        this.updateSuggestions = this.updateSuggestions.bind(this)\n        this.updateResult = this.updateResult.bind(this)\n        this.updateSearchQuery = this.updateSearchQuery.bind(this)\n\n        this.toggleCityInput = this.toggleCityInput.bind(this)\n\n        this.keymap = {\n            ...this.keymap,\n            'Enter': this.updateResult,\n            '/letter/': this.updateSearchQuery\n        }\n    }\n\n    componentDidMount() {\n        App.initializeCitiesIfNotExists()\n\n        App.showSection(this.state.activeSection)\n\n        document.addEventListener('keydown', App.switchToMainSectionWhenEsc, false)\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keydown', App.switchToMainSectionWhenEsc, false)\n    }\n\n    render() {\n        const {suggestions, searchQuery} = this.state\n\n        let activeCity = localStorage.getItem('active_city_cache')\n        if (!!activeCity) activeCity = JSON.parse(activeCity)\n\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    Weather\n                </header>\n                <section className=\"App-section\">\n                    <SearchBar\n                        handleInput={this.handleInput} handleKeyPress={this.handleKeyPress}\n                        handleSuggestionClick={this.handleSuggestionClick}\n                        suggestions={suggestions} searchQuery={searchQuery}/>\n                    <Result city={activeCity}/>\n                </section>\n                <footer className=\"App-footer\">\n                    Fait par Ulysse ARNAUD avec ReactJS\n                </footer>\n            </div>\n        )\n    }\n\n    handleInput(event) {\n        event.preventDefault()\n\n        console.log('handleInput', {event})\n\n        App.resetInputCityId()\n\n        const action = this.keymap['/letter/']\n        action(event)\n    }\n\n    handleKeyPress(event) {\n        console.log('handleKeyPress', {event})\n        const {key} = event\n\n        if (false === this.keymap.hasOwnProperty(key)) return\n\n        const action = this.keymap[key]\n        if (!action) return\n\n        action(event)\n    }\n\n    handleSuggestionClick(event) {\n        event.preventDefault()\n        return this.toggleCityInput(event)\n    }\n\n    updateResult(event) {\n        console.log('App : updateResult', {event})\n\n        const cityId = App.getInputCityId()\n        const city = App.getInputCity()\n\n        console.log({city})\n\n        if (!city) return\n\n        console.log({cityId})\n\n        let activeCity = !!cityId ? App.getCityFromId(cityId) : App.getCityFromName(city)\n\n        console.log({activeCity})\n\n        localStorage.setItem('active_city_cache', JSON.stringify(activeCity))\n\n        this.forceUpdate()\n\n        App.showSection('result')\n    }\n\n    updateSearchQuery(event) {\n        console.log('App : updateSearchQuery', {event})\n        const {target} = event\n        const {value: searchQuery} = target\n\n        this.setState({searchQuery})\n        this.forceUpdate()\n\n        this.updateSuggestions()\n    }\n\n    updateSuggestions() {\n        console.log('App : updateSuggestions')\n\n        let suggestions = {}\n\n        let {searchQuery} = this.state\n\n        if (!searchQuery) {\n            this.setState({suggestions})\n            this.forceUpdate()\n            return;\n        }\n\n        searchQuery = searchQuery.trim()\n\n        const jQueryVersion = 'jQuery191028882251251129487_1605706515334'\n        const endpointFind = `https://openweathermap.org/data/2.5/find?callback=${jQueryVersion}&q=${searchQuery}&type=like&sort=population&cnt=30&appid=439d4b804bc8187953eb36d2a8c26a02&_=1605706515335`\n        fetch(endpointFind)\n            .then(response => response.text())\n            .then(response => {\n                response = response.replace(jQueryVersion, '')\n                response = response.substring(1, response.length - 1)\n                return JSON.parse(response)\n            })\n            .then(response => {\n                console.log({response})\n                const {cod, count, list, message} = response\n                for (let cursor = 0; cursor < count; cursor++) {\n                    const city = list[cursor]\n                    App.pushCity(city)\n\n                    const {id, name, sys} = city\n                    const {country} = sys\n\n                    if (true === suggestions.hasOwnProperty(id)) {\n                        delete suggestions[id]\n                    }\n\n                    suggestions[id] = `${name},${country}`\n                }\n                this.setState({suggestions})\n                this.forceUpdate()\n            })\n            .catch(console.log)\n    }\n\n    toggleCityInput(event) {\n        const {target} = event\n        const {id, name, country} = target.dataset\n\n        const value = `${name}, ${country}`\n\n        App.setInputCity(value)\n\n        App.setInputCityId(id)\n\n        const searchQuery = value\n        this.setState({searchQuery})\n    }\n\n    static resetInputCityId() {\n        const inputCityId = document.querySelector('.App-section-search_bar input[name=\"city_id\"]')\n        inputCityId.value = null\n    }\n\n    static setInputCityId(id) {\n        const inputCityId = document.querySelector('.App-section-search_bar input[name=\"city_id\"]')\n        inputCityId.value = id\n    }\n\n    static getInputCityId() {\n        const inputCityId = document.querySelector('.App-section-search_bar input[name=\"city_id\"]')\n        return inputCityId.value\n    }\n\n    static resetInputCity() {\n        const inputCity = document.querySelector('.App-section-search_bar input[name=\"city\"]')\n        inputCity.value = null\n    }\n\n    static setInputCity(city) {\n        const inputCity = document.querySelector('.App-section-search_bar input[name=\"city\"]')\n        inputCity.value = city.trim()\n    }\n\n    static getInputCity() {\n        const inputCity = document.querySelector('.App-section-search_bar input[name=\"city\"]')\n        return inputCity.value\n    }\n\n    static getCities() {\n        const cities = localStorage.getItem('cities_cache')\n        if (!cities) return null\n        return JSON.parse(cities)\n    }\n\n    static getCityFromName(name) {\n        let cities = App.getCities()\n\n        const [_name, _country] = name.split(',')\n\n        console.log({_name, _country})\n\n        for (let cursor = 0, cursorMax = cities.length; cursor < cursorMax; cursor++) {\n            const city = cities[cursor]\n            if (_name.trim().toLowerCase() === city.name.trim().toLowerCase()) {\n                if (!_country) return city\n                if (!!_country && _country.trim().toLowerCase() === city.sys.country.trim().toLowerCase()) return city\n            }\n        }\n\n        return null\n    }\n\n    static getCityFromId(id) {\n        let cities = App.getCities()\n\n        for (let cursor = 0, cursorMax = cities.length; cursor < cursorMax; cursor++) {\n            const city = cities[cursor]\n            if (parseInt(id) === parseInt(city.id)) {\n                return city\n            }\n        }\n\n        return null\n    }\n\n    static pushCity(city) {\n        let cities = App.getCities()\n\n        const {id} = city\n\n        let cityExists = false\n\n        for (let cursor = 0, cursorMax = cities.length; cursor < cursorMax; cursor++) {\n            const _city = cities[cursor]\n            if (id === _city.id) {\n                cityExists = true\n                cities[cursor] = city\n                break\n            }\n        }\n\n        if (!cityExists) cities.push(city)\n\n        cities = JSON.stringify(cities)\n\n        localStorage.setItem('cities_cache', cities)\n    }\n\n    static initializeCitiesIfNotExists() {\n        if (!!localStorage.getItem('cities_cache')) return\n        localStorage.setItem('cities_cache', JSON.stringify([]))\n    }\n\n\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './scripts/reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}